{"version":3,"sources":["components/Page1/Page1.jsx","components/NavigationBar/NavigationBar.jsx","components/Home/Home.js","components/Footer/StyledFooter.js","components/Footer/Footer.jsx","components/Page2/Page2.jsx","App.js","serviceWorker.js","index.js"],"names":["About","Fragment","Container","id","style","height","NavigationBar","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","sticky","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Home","Page1","StyledFooter","styled","div","AppFooter","Row","Col","src","alt","Page2","App","path","component","exact","render","paddingTop","Footer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MA4BeA,EAnBD,WACV,OAEI,kBAAC,IAAMC,SAAP,KAGA,kBAACC,EAAA,EAAD,CAAWC,GAAG,UACd,kBAAC,IAAD,KACI,yBAAKC,MAAO,CAACC,OAAQ,UACb,4C,oHCsDLC,G,YAnDO,SAACC,GAAW,IAAD,EAEHC,oBAAS,GAFN,mBAExBC,EAFwB,KAEhBC,EAFgB,KAM7B,OACE,kBAAC,IAAMT,SAAP,KAIA,kBAACU,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,KAAKC,OAAQ,OAChD,kBAACb,EAAA,EAAD,KAEE,kBAACc,EAAA,EAAD,CAAaC,KAAK,KAAlB,cACA,kBAACC,EAAA,EAAD,CAAeC,QAZN,kBAAMT,GAAWD,MAa1B,kBAACW,EAAA,EAAD,CAAUX,OAAQA,EAAQY,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,KAAd,WAEF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASR,KAAK,WAAd,WAEF,kBAACS,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,WAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACjB,kBAACC,EAAA,EAAD,mBAGA,kBAACA,EAAA,EAAD,oBAGA,kBAACA,EAAA,EAAD,CAAcC,SAAO,IACrB,kBAACD,EAAA,EAAD,iBAMN,kBAACE,EAAA,EAAD,0BC5CKC,G,MAZF,WAEX,OACE,kBAAC,IAAMnC,SAAP,CAAgBE,GAAG,QAEjB,kBAACkC,EAAD,S,8MCVC,IAAMC,E,MAAeC,EAAOC,IAAV,KC8BVC,G,MA1BG,WACd,OACI,kBAAC,IAAMxC,SAAP,KACI,kBAACqC,EAAD,CAAcnC,GAAG,UACb,kBAAC,IAAD,KAGI,kBAACuC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,KACI,iEAGJ,kBAACA,EAAA,EAAD,KACI,yBAAKC,IAAI,kEAAkEC,IAAI,+BCE5FC,EAlBD,WAGZ,OACE,kBAAC,IAAM7C,SAAP,KAGY,kBAAC,IAAD,CAAWE,GAAG,UACd,yBAAKC,MAAO,CAACC,OAAQ,UACb,0CCwBT0C,EA3BH,WAEV,OACE,kBAAC,IAAM9C,SAAP,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KAIE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+C,KAAK,IAAIC,UAAWb,EAAMc,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWH,IAEjC,kBAAC,IAAD,CAAOK,OAAQ,kBAAM,wBAAI/C,MAAO,CAAEgD,WAAY,QAAzB,0BAMvB,kBAACC,EAAD,SCjBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.adc21018.chunk.js","sourcesContent":["import React from 'react';\nimport './page1.css';\nimport { Container } from 'reactstrap';\nimport Fade from 'react-reveal/Fade';\n\n\n\n\n\nconst About = () => {\n    return (\n  \n        <React.Fragment>\n\n\n        <Container id=\"page-1\">\n        <Fade>\n            <div style={{height: '100vh'}}>\n                    <h1>Trident</h1>\n            </div>\n        </Fade>\n        </Container>\n\n\n        </React.Fragment>\n    );\n}\n\nexport default About","import React, { useState, useEffect } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText,\n  Container,\n} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './navbar.css';\nimport $ from 'jquery';\n\n\nconst NavigationBar = (props) => {\n\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n\n    return (\n      <React.Fragment>\n\n\n\n      <Navbar color=\"light\" light expand=\"md\" sticky={'top'}>\n      <Container>\n\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Page 1</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/page-2\">Page 2</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Options\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Someting 1\n                </DropdownItem>\n                <DropdownItem>\n                  Something 2\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Reset\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>Simple Text</NavbarText>\n        </Collapse>\n        </Container>\n      </Navbar>\n      </React.Fragment>\n    );\n}\n\n\nexport default NavigationBar;\n\n","import React from 'react';\nimport Page1 from '../Page1';\nimport Navbar from '../NavigationBar';\nimport './home.css';\nimport $ from 'jquery';\n\n\nconst Home = () => {\n\n  return (\n    <React.Fragment id=\"home\">\n\n      <Page1 />\n\n    </React.Fragment>\n  )\n};\n\n\nexport default Home;","import styled from 'styled-components';\n\nexport const StyledFooter = styled.div`\n    background: grey;\n    color: white;\n    height: 25vh;\n    marginTop: 'auto';\n`;\t","import React from 'react';\nimport { Col, Row, Container } from 'react-bootstrap';\nimport { StyledFooter } from './StyledFooter';\nimport './footer.css';\n\n\nconst AppFooter = () => {\n    return (\n        <React.Fragment>\n            <StyledFooter id=\"footer\">\n                <Container>\n\n\n                    <Row>\n\n                        <Col>\n                            <span> Copyright â’¸ [...], 2020 </span>\n                        </Col>\n\n                        <Col>\n                            <img src='https://alfredorafael.com/wp-content/uploads/2019/02/myLogo.png' alt='Alfredo Rafael Logo' />\n                        </Col>\n\n                    </Row>\n\n                </Container>\n\n            </StyledFooter>\n        </React.Fragment>\n    )\n}\n\nexport default AppFooter;\n\n","import React, { useEffect } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport $ from \"jquery\";\n\nconst Page2 = () => {\n  \n\n  return (\n    <React.Fragment>\n\n\n                <Container id=\"page-2\">\n                <div style={{height: '100vh'}}>\n                        <h1>Page 2</h1>\n                    </div>\n\n                </Container>\n\n        </React.Fragment>\n  );\n};\n\nexport default Page2;\n\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from './components/NavigationBar/NavigationBar';\nimport Footer from './components/Footer/Footer';\nimport Page2 from './components/Page2/Page2';\nimport $ from 'jquery';\n\n\nconst App = () => {\n\n  return (\n    <React.Fragment>\n    <Navbar />\n      <Router>\n\n\n        {/* //////////////////////////////////////////////////////////////////////// */}\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/page-2\" component={Page2} />\n\n          <Route render={() => <h2 style={{ paddingTop: '15%' }}>404 Page not found</h2>} />\n\n        </Switch>\n        {/* //////////////////////////////////////////////////////////////////////// */}\n\n\n        <Footer />\n      </Router>\n\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}